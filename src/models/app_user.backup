use crate::{
    config::db::Connection,
    constants,
    models::common::{DbQuery},
};
use cdrs::{
    query::*,
    frame::{
        IntoBytes,
    },
    types::{
        AsRustType, AsRust, IntoRustByName, ByName, IntoRustByIndex, ByIndex,
        from_cdrs::FromCDRSByName,
        prelude::*,
        rows::Row,
    }
};
use std::result::Result;
use uuid::Uuid;

// table name
pub const TABLE_NAME: &str = "app_users";

#[derive(Clone, Debug, TryFromRow, Serialize, Deserialize)]
pub struct AppUser {
    pub id: Uuid,
    pub app_id: i64,
    pub app_user_id: String,
    pub display_name: String,
    pub display_image: Option<String>,
    pub chat_rooms: Option<Vec<String>>,
    pub status: i8,
    pub updated_at: i64,
    pub created_at: i64,
}

#[derive(Debug, Serialize, Deserialize, TryFromRow)]
pub struct AppUserDTO {
    pub app_id: i64,
    pub app_user_id: String,
    pub display_name: String,
    pub display_image: Option<String>,
}
impl AppUserDTO {
    fn into_query_values(self) -> QueryValues {
        let display_image = self.display_image.unwrap();
        let app_user_id = format!("{:?}_{}", &self.app_id, self.app_user_id);
        query_values!("app_id" => self.app_id, "app_user_id" => app_user_id, "display_name" => self
        .display_name, "display_image" => display_image)
    }
}

impl AppUser {
    pub fn find_by_app_id(app_id: i64, conn: &Connection) ->  Result<Vec<AppUser>, String> {
        println!("find_by_app_id  = {:?}", app_id);
        let rows = DbQuery::get_rows(&conn, TABLE_NAME, "*", "app_id=?", query_values!(app_id)).expect("get user");
        println!("rows ========= {:?}", rows);
        let mut users: Vec<AppUser> = vec![];
        for row in rows {
            match AppUser::try_from_row(row) {
                Ok(new_row) => {
                    println!("new_row == {:?} ", new_row);
                    users.push(new_row)
                },
                Err(ref err) => {
                    println!("appUser::try_from_row, error - {:?}", &err);
                    return  Err(err.to_string())
                },
            }
        }
        Ok(users)
    }
    pub fn insert_user(conn: &Connection, app_user: AppUserDTO) -> Result<String, String> {
        let db_insert = DbQuery::insert(&conn, TABLE_NAME, "app_id, app_user_id, id, display_name, \
        display_image, status, updated_at, created_at", "?, ?, uuid(), ?, ?, 1, toTimestamp(now()), toTimestamp(now())", app_user.into_query_values());
        match db_insert {
            Ok(_) => Ok(constants::MESSAGE_APP_USER_CREATED_SUCCESS.to_string()),
            Err(ref err) => {
                println!("can't insert, error - {:?}", &err);
                return  Err(constants::MESSAGE_APP_USER_NOT_CREATED.to_string())
            },
        }
    }
}